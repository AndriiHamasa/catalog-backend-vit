from django.contrib import admin
from django.utils.html import format_html
from .models import Category, Product, ProductImage


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['title', 'product_count', 'created_at']
    search_fields = ['title']
    
    def product_count(self, obj):
        count = obj.products.count()
        return f"{count} —Ç–æ–≤–∞—Ä(–æ–≤)"
    product_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤'


# class ProductImageInline(admin.TabularInline):
#     """–ò–Ω–ª–∞–π–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä—è–º–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞"""
#     model = ProductImage
#     extra = 3  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –ø—É—Å—Ç—ã—Ö –ø–æ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
#     fields = ['image', 'order', 'image_preview']
#     readonly_fields = ['image_preview']
    
#     def image_preview(self, obj):
#         if obj.image:
#             return format_html(
#                 '<img src="{}" style="max-height: 100px; max-width: 200px; border-radius: 5px;" />',
#                 obj.image.url
#             )
#         return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
#     image_preview.short_description = '–ü—Ä–µ–≤—å—é'
# class ProductImageInline(admin.TabularInline):
#     """–ò–Ω–ª–∞–π–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
#     model = ProductImage
#     extra = 1
#     fields = ['image', 'image_url', 'order', 'image_preview']
#     readonly_fields = ['image_preview']
    
#     def image_preview(self, obj):
#         url = obj.get_image_url()
#         if url:
#             return format_html(
#                 '<img src="{}" style="max-height: 100px; max-width: 200px; border-radius: 5px;" />',
#                 url
#             )
#         return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
#     image_preview.short_description = '–ü—Ä–µ–≤—å—é'
class ProductImageInline(admin.TabularInline):
    """–ò–Ω–ª–∞–π–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
    model = ProductImage
    extra = 1
    fields = ['image', 'image_url', 'order', 'image_preview']
    readonly_fields = ['image_preview']
    
    def image_preview(self, obj):
        if obj.image_url:
            return format_html(
                '<img src="{}" style="max-height: 100px; max-width: 200px; border-radius: 5px;" />',
                obj.image_url
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    image_preview.short_description = '–ü—Ä–µ–≤—å—é'


# @admin.register(Product)
# class ProductAdmin(admin.ModelAdmin):
#     list_display = [
#         'title', 
#         'category', 
#         'price', 
#         'status_badge',
#         'is_active', 
#         'images_count',
#         'created_at'
#     ]
#     list_filter = ['category', 'status', 'is_active', 'created_at']
#     search_fields = ['title', 'description']
#     list_editable = ['is_active', 'price']
#     inlines = [ProductImageInline]  # –§–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º–æ —Ç—É—Ç
    
#     fieldsets = (
#         ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
#             'fields': ('title', 'category', 'price')
#         }),
#         ('–û–ø–∏—Å–∞–Ω–∏–µ', {
#             'fields': ('description',),
#             'classes': ('wide',)
#         }),
#         ('–°—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', {
#             'fields': ('status', 'is_active')
#         }),
#     )
    
#     def status_badge(self, obj):
#         if obj.status == 'new':
#             color = '#28a745'
#             text = 'üÜï –ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞'
#         else:
#             color = '#6c757d'
#             text = 'üì¶ –û–±—ã—á–Ω—ã–π'
#         return format_html(
#             '<span style="background: {}; color: white; padding: 3px 10px; border-radius: 3px; font-size: 11px;">{}</span>',
#             color, text
#         )
#     status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
#     def images_count(self, obj):
#         count = obj.images.count()
#         if count == 0:
#             return format_html('<span style="color: red;">‚ùå 0 —Ñ–æ—Ç–æ</span>')
#         return format_html('<span style="color: green;">‚úÖ {} —Ñ–æ—Ç–æ</span>', count)
#     images_count.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    
#     # –î–µ–ª–∞–µ–º —É–¥–æ–±–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
#     ordering = ['-created_at']

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = [
        'title', 
        'category', 
        'price', 
        'status_badge',
        'is_active', 
        'images_count',
        'created_at'
    ]
    list_filter = ['category', 'status', 'is_active', 'created_at']
    search_fields = ['title', 'description']
    list_editable = ['is_active', 'price']
    inlines = [ProductImageInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'category', 'price')
        }),
        ('–û–ø–∏—Å–∞–Ω–∏–µ', {
            'fields': ('description',),
            'classes': ('wide',)
        }),
        ('–°—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', {
            'fields': ('status', 'is_active')
        }),
    )
    
    def status_badge(self, obj):
        if obj.status == 'new':
            color = '#28a745'
            text = 'üÜï –ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞'
        else:
            color = '#6c757d'
            text = 'üì¶ –û–±—ã—á–Ω—ã–π'
        return format_html(
            '<span style="background: {}; color: white; padding: 3px 10px; border-radius: 3px; font-size: 11px;">{}</span>',
            color, text
        )
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def images_count(self, obj):
        count = obj.images.count()
        if count == 0:
            return format_html('<span style="color: red;">‚ùå 0 —Ñ–æ—Ç–æ</span>')
        return format_html('<span style="color: green;">‚úÖ {} —Ñ–æ—Ç–æ</span>', count)
    images_count.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    
    ordering = ['-created_at']

# @admin.register(ProductImage)
# class ProductImageAdmin(admin.ModelAdmin):
#     """–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
#     list_display = ['id', 'product', 'image_preview', 'order', 'created_at']
#     list_filter = ['created_at']
#     search_fields = ['product__title']
#     list_editable = ['order']
    
#     def image_preview(self, obj):
#         if obj.image:
#             return format_html(
#                 '<img src="{}" style="max-height: 50px; max-width: 100px; border-radius: 5px;" />',
#                 obj.image.url
#             )
#         return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
#     image_preview.short_description = '–ü—Ä–µ–≤—å—é'

# @admin.register(ProductImage)
# class ProductImageAdmin(admin.ModelAdmin):
#     list_display = ['id', 'product', 'image_preview', 'has_file', 'has_url', 'order', 'created_at']
#     list_filter = ['created_at']
#     search_fields = ['product__title']
#     list_editable = ['order']
#     fields = ['product', 'image', 'image_url', 'order', 'image_preview']
#     readonly_fields = ['image_preview']
    
#     def image_preview(self, obj):
#         url = obj.get_image_url()
#         if url:
#             return format_html(
#                 '<img src="{}" style="max-height: 100px; max-width: 200px; border-radius: 5px;" />',
#                 url
#             )
#         return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
#     image_preview.short_description = '–ü—Ä–µ–≤—å—é'
    
#     def has_file(self, obj):
#         return '‚úÖ' if obj.image else '‚ùå'
#     has_file.short_description = '–§–∞–π–ª'
    
#     def has_url(self, obj):
#         return '‚úÖ' if obj.image_url else '‚ùå'
#     has_url.short_description = 'URL'

@admin.register(ProductImage)
class ProductImageAdmin(admin.ModelAdmin):
    list_display = ['id', 'product', 'image_preview', 'order', 'created_at']
    list_filter = ['created_at']
    search_fields = ['product__title']
    list_editable = ['order']
    fields = ['product', 'image_url', 'order', 'image_preview']
    readonly_fields = ['image_preview']
    
    def image_preview(self, obj):
        if obj.image_url:
            return format_html(
                '<img src="{}" style="max-height: 100px; max-width: 200px; border-radius: 5px;" />',
                obj.image_url
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    image_preview.short_description = '–ü—Ä–µ–≤—å—é'

